classDiagram
    %% Event Publisher Interface (Abstraction)
    class EventPublisher {
        <<interface>>
        +Publish(event Event) error
        +PublishBatch(events []Event) error
        +Close() error
    }

    %% Event Domain Model
    class Event {
        +ID string
        +EventType string
        +AggregateID string
        +StoreID string
        +Payload json.RawMessage
        +Timestamp time.Time
        +toMap() map[string]interface{}
    }

    %% Redis Publisher Implementation
    class RedisPublisher {
        -client *redis.Client
        -streamName string
        -maxLen int64
        +NewRedisPublisher(host, port, streamName) *RedisPublisher
        +Publish(event Event) error
        +PublishBatch(events []Event) error
        +Close() error
    }

    %% Kafka Publisher Implementation (Planned)
    class KafkaPublisher {
        -producer *kafka.Producer
        -topic string
        +NewKafkaPublisher(brokers, topic) *KafkaPublisher
        +Publish(event Event) error
        +PublishBatch(events []Event) error
        +Close() error
    }

    %% Mock Publisher (Testing)
    class MockPublisher {
        -publishedEvents []Event
        -publishError error
        +NewMockPublisher() *MockPublisher
        +Publish(event Event) error
        +PublishBatch(events []Event) error
        +GetPublishedEvents() []Event
        +SetError(err error)
        +Close() error
    }

    %% NoOp Publisher (Development)
    class NoOpPublisher {
        +NewNoOpPublisher() *NoOpPublisher
        +Publish(event Event) error
        +PublishBatch(events []Event) error
        +Close() error
    }

    %% Services that use EventPublisher
    class StockService {
        -stockRepo StockRepository
        -eventRepo EventRepository
        -eventPublisher EventPublisher
        +CreateStock(productID, storeID, quantity) error
        +UpdateStock(productID, storeID, quantity) error
        +Reserve(productID, storeID, quantity) error
        +Release(productID, storeID, quantity) error
    }

    class ReservationService {
        -reservationRepo ReservationRepository
        -stockService StockService
        -eventPublisher EventPublisher
        +CreateReservation(productID, customerID, quantity, ttl) error
        +ConfirmReservation(id) error
        +CancelReservation(id) error
        +ExpireReservation(id) error
    }

    class ProductService {
        -productRepo ProductRepository
        -eventPublisher EventPublisher
        +CreateProduct(product Product) error
        +UpdateProduct(id, product Product) error
        +DeleteProduct(id) error
    }

    %% Repositories
    class EventRepository {
        -db *sql.DB
        +Save(event Event) error
        +GetByAggregateID(id) []Event
        +GetByEventType(eventType) []Event
        +GetAll(limit, offset) []Event
    }

    %% External Systems
    class RedisStreams {
        <<external>>
        stream: inventory-events
        maxlen: ~100000
        +XADD(key, fields)
        +XREAD(streams)
        +XLEN(key)
    }

    class KafkaTopic {
        <<external>>
        topic: inventory-events
        partitions: 3
        replication: 2
        +Produce(message)
        +Consume(group)
    }

    class SQLiteDatabase {
        <<external>>
        table: events
        +INSERT INTO events
        +SELECT * FROM events
    }

    %% Relationships
    EventPublisher <|.. RedisPublisher : implements
    EventPublisher <|.. KafkaPublisher : implements
    EventPublisher <|.. MockPublisher : implements
    EventPublisher <|.. NoOpPublisher : implements

    StockService --> EventPublisher : uses
    ReservationService --> EventPublisher : uses
    ProductService --> EventPublisher : uses

    StockService --> EventRepository : persists to DB
    ReservationService --> EventRepository : persists to DB
    ProductService --> EventRepository : persists to DB

    RedisPublisher --> RedisStreams : publishes to
    KafkaPublisher --> KafkaTopic : publishes to
    EventRepository --> SQLiteDatabase : stores in

    Event --* EventPublisher : publishes
    Event --* EventRepository : stores

    %% Notes
    note for EventPublisher "Abstraction (Interface)\nServices depend on this,\nnot concrete implementations"
    note for RedisPublisher "Concrete Implementation\nUsing Redis Streams XADD\nStatus: âœ… Implemented"
    note for KafkaPublisher "Concrete Implementation\nUsing Kafka Producer API\nStatus: ðŸ”œ Planned"
    note for MockPublisher "Testing Implementation\nCaptures events in memory\nStatus: âœ… Used in tests"
    note for NoOpPublisher "Development Implementation\nDoes nothing (no-op pattern)\nStatus: âœ… For local dev"
    note for StockService "Domain Service\nDepends on EventPublisher\ninterface, not implementation"
    note for EventRepository "Dual Persistence:\n1. DB for audit/sourcing\n2. Broker for real-time"
