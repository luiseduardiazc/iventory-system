sequenceDiagram
    participant Client
    participant API as Gin API Server
    participant Handler as Stock Handler
    participant Service as Stock Service
    participant Repo as Stock Repository
    participant EventRepo as Event Repository
    participant Publisher as Event Publisher
    participant DB as SQLite Database
    participant Redis as Redis Streams
    participant Worker as Background Workers

    %% Create Stock Flow
    rect rgb(220, 255, 220)
        note right of Client: Create Stock (Initial Inventory)
        Client->>API: POST /api/v1/stock
        API->>Handler: CreateStock(request)
        Handler->>Service: CreateStock(productID, storeID, quantity)
        
        Service->>Repo: Create(stock)
        Repo->>DB: INSERT INTO stock
        DB-->>Repo: OK
        Repo-->>Service: stock created
        
        Service->>EventRepo: SaveEvent(stock.created)
        EventRepo->>DB: INSERT INTO events
        DB-->>EventRepo: OK
        
        Service->>Publisher: Publish(stock.created)
        Publisher->>Redis: XADD inventory-events
        Redis-->>Publisher: event-id
        
        Service-->>Handler: stock
        Handler-->>API: 201 Created
        API-->>Client: {"id": "...", "quantity": 100}
    end

    %% Create Reservation Flow
    rect rgb(255, 255, 220)
        note right of Client: Create Reservation (Reserve Stock)
        Client->>API: POST /api/v1/reservations
        API->>Handler: CreateReservation(request)
        Handler->>Service: CreateReservation(productID, quantity, ttl)
        
        Service->>Repo: GetByProductAndStore(productID, storeID)
        Repo->>DB: SELECT * FROM stock WHERE version=N
        DB-->>Repo: current stock (version=N)
        Repo-->>Service: stock {quantity: 100, reserved: 0, version: N}
        
        Service->>Service: Check: available >= quantity?
        Service->>Service: Calculate: reserved += quantity
        
        Service->>Repo: Update(stock) WHERE version=N
        Repo->>DB: UPDATE stock SET reserved=5, version=N+1<br/>WHERE id=X AND version=N
        DB-->>Repo: 1 row affected (Optimistic Lock Success ✅)
        Repo-->>Service: updated
        
        Service->>EventRepo: SaveEvent(reservation.created)
        EventRepo->>DB: INSERT INTO events
        
        Service->>Publisher: Publish(reservation.created)
        Publisher->>Redis: XADD inventory-events
        
        Service-->>Handler: reservation
        Handler-->>API: 201 Created
        API-->>Client: {"id": "...", "status": "PENDING", "expires_at": "..."}
    end

    %% Confirm Reservation Flow
    rect rgb(220, 240, 255)
        note right of Client: Confirm Reservation (Complete Purchase)
        Client->>API: POST /api/v1/reservations/:id/confirm
        API->>Handler: ConfirmReservation(id)
        Handler->>Service: ConfirmReservation(id)
        
        Service->>Repo: GetByID(id)
        Repo->>DB: SELECT * FROM reservations
        DB-->>Repo: reservation {status: PENDING}
        
        Service->>Service: Validate: status == PENDING?
        Service->>Service: Validate: NOT expired?
        
        Service->>Repo: GetByProductAndStore(productID, storeID)
        Repo->>DB: SELECT * FROM stock WHERE version=M
        DB-->>Repo: stock {quantity: 100, reserved: 5, version: M}
        
        Service->>Service: Calculate: quantity -= reservedQty<br/>reserved -= reservedQty
        
        Service->>Repo: Update(stock) WHERE version=M
        Repo->>DB: UPDATE stock SET quantity=95, reserved=0,<br/>version=M+1 WHERE version=M
        DB-->>Repo: 1 row affected (Optimistic Lock Success ✅)
        
        Service->>Repo: UpdateStatus(reservation, CONFIRMED)
        Repo->>DB: UPDATE reservations SET status='CONFIRMED'
        
        Service->>EventRepo: SaveEvent(reservation.confirmed)
        EventRepo->>DB: INSERT INTO events
        
        Service->>Publisher: Publish(reservation.confirmed)
        Publisher->>Redis: XADD inventory-events
        
        Service-->>Handler: confirmed
        Handler-->>API: 200 OK
        API-->>Client: {"status": "CONFIRMED"}
    end

    %% Background Worker - Expiration
    rect rgb(255, 220, 220)
        note right of Worker: Background: Auto-Expire Reservations
        loop Every 30 seconds
            Worker->>Repo: GetPendingExpired()
            Repo->>DB: SELECT * FROM reservations<br/>WHERE status='PENDING'<br/>AND expires_at < NOW()
            DB-->>Repo: [expired reservations]
            Repo-->>Worker: expired reservations
            
            loop For each expired reservation
                Worker->>Service: CancelReservation(id)
                Service->>Repo: Update stock (release reserved)
                Repo->>DB: UPDATE stock SET reserved -= qty
                Service->>Repo: UpdateStatus(EXPIRED)
                Repo->>DB: UPDATE reservations SET status='EXPIRED'
                
                Service->>EventRepo: SaveEvent(reservation.expired)
                EventRepo->>DB: INSERT INTO events
                
                Service->>Publisher: Publish(reservation.expired)
                Publisher->>Redis: XADD inventory-events
            end
        end
    end

    %% Event Flow Summary
    note over DB,Redis: Double Persistence Strategy
    note over DB: Events table:<br/>- Audit trail<br/>- Event sourcing<br/>- State reconstruction
    note over Redis: Message broker:<br/>- Real-time processing<br/>- Notifications<br/>- Microservices integration
